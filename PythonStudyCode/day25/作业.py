# @time: 2022/1/20 11:39 AM
# Author: pan
# @File: 作业.py
# @Software: PyCharm

import re

# 1、匹配密码，密码必须是由6位数字与字母组成，并且不能是纯数字也不能是纯字母
# 1.1 知识点：# ?!pattern, 表示在没有配到pattern的字符串的前提下，
# 再进行后续的正则表达式匹配，后续匹配仍然从被匹配字符串的头开始

# 1.2 答案：
# print(re.search("(?!^[0-9]+$)(?!^[a-zA-Z]+$)^[0-9A-Za-z]{6}$", "123asf").group())  # 123asf

# 1.3 解释：
# 上述正则的意思为：在匹配(?!^[0-9]+$)以及(?!^[a-zA-Z]+$)过后，
# 如果字符串成功后在从头去匹配(?!^[a-zA-Z]+$)，最终匹配完。

# 答案实例：
# (?!^[0-9]+$) 如果开头到结尾都是数字 重新开始进行匹配
# (?!^[a-zA-Z]+$) 如果开头到结尾都是字母 重新开始进行匹配
# ^[0-9A-Za-z]{6}$ 开头到结尾中间有数字和字母
'''
obj = re.compile('(?!^[0-9]+$)(?!^[a-zA-Z]+$)^[0-9A-Za-z]{6}$')
while True:
    inp_pwd = input("请输入密码:").strip()
    res = obj.search(inp_pwd)
    if res:
        print(res.group())
        break
    else:
        print("密码必须是由6位数字和字符串组成！！！")
'''


# 2、匹配密码，
# 密码强度：强，必须包含大写，小写和数字,和特殊字符(!,@,#,%,&),且大于6位
# 2.1 知识点：# ?=pattern,表示在配到pattern的字符串的前提下，
# 再进行后续的正则表达式匹配，后续匹配仍然从被匹配字符串的头开始

# 2.2 答案：
"""
while True:
    pwd = input("please your password: ").strip()  # 比如输入：Aa3@adf123
    pwd_pattern= re.compile("(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#%&])^([a-zA-Z0-9!@#%&]){6,}$")
    if pwd_pattern.search(pwd) is None:
        print("密码强度不够")
    else:
        break
"""

# 2.3 解释：
# "(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#%&])^([a-zA-Z0-9!@#%&]){6,}$"
# 上述正则表达式的意思：
#（1）首先是(?=.*[A-Z])匹配
# .*表示密码中可以包含多个字符
# [A-Z]代表密码中需要包含至少一个大写字母
# 注意一定不要去掉.*写成(?=[A-Z]),那样表示密码只能由一个字符组成，该字符是大写字母
#（2）其次是(?=.*[a-z])匹配，同上，确保密码中必须至少有一个小写字母
#（3）然后是(?=.*[0-9])匹配，同上，确保密码中必须至少有一个数字
#（4）然后是(?=.*[!@#%&])匹配，同上，，确保密码中必须至少有一个特殊符号!@#%&
#（5）最后是^([a-zA-Z0-9!@#%&]){6,}$，
# 确保密码是由[a-zA-Z0-9!@#%&]字符构成，至少有6位


# 3、匹配email
# print(re.findall("(?:[a-zA-Z0-9]+)@(?:[0-9a-zA-Z]+).com","18611323113@163.com xxx@qq.com"))
# (?:[a-zA-Z0-9]+)@(?:[0-9a-zA-Z]+).com
# ?: 匹配之后返回的结果要加上括号外的内容
# (?:[a-zA-Z0-9]+) 表示包含大小写字母或0-9的字符 1个到n个

# 4、匹配身份证
# your_id=input(">>: ").strip()
# print(re.findall("^([0-9]){17}([0-9]|X)$", your_id))
# 17个数字组成，最后一个字符可以是数字或X

# 5、匹配用户名，包含字母或者数字,且8位
# print(re.findall("^[0-9a-zA-Z]{8}$", "egonlinh"))

# 5.1、要求输入的内容只能是汉字
# name=input('>>: ').strip()
# print(re.search(r'[\u4E00-\u9fa5]+', name))

# 6、取出字符串里的数字
# print(re.findall(r'\d+(?:\.\d+)?', 'sww123kw11.333e2lkd'))

# 7、取出所有负整数
# print(re.findall(r'-\d+', '-12,3,54,-13.11,64，-9'))  # 错误答案
# print(re.findall(r'(?!-\d+\.\d+)-\d+', '-12,3,54,-13.11,64，-9'))  # 正确答案

# 8、所有数字
# print(re.findall(r'\-?\d+(?:\.\d+)?', '-12.9,3.92,54.11,64，89，-9，-45.2'))

# 9、所有负数
# print(re.findall(r'\-\d+(?:\.\d+)?', '-12.9,3.92,54.11,64，89，-9，-45.2'))

# 10、所有的非负浮点数
print(re.findall(r'\d+\.\d+', '-12.9,3.92,54.11,64，89，-9，-45.2'))

# 11、
msg = """
中文名 贝拉克·侯赛因·奥巴马 
外文名 Barack Hussein Obama II 
别名 欧巴马 
性 别 男
国籍 美国 
民 族 德裔族 
出生地 美国夏威夷州檀香山 
出生日期 1961年8月4日 
职 业政治家、律师、总统 
毕业院校 哥伦比亚大学，哈佛大学 
信 仰新教 
主要成就 1996年伊利诺伊州参议员 
主要成就 美国第56届、57届总统 2009年诺贝尔和平奖获得者 时代周刊年度风云人物2008、2011 任期内清除本·拉登 
代表作品 《我相信变革》《我父亲的梦想》《无畏的希望》 
所属政党美国民主党 
血 型 AB型 
学 院西方学院 
妻 子 米歇尔·拉沃恩·奥巴马 

"""
# 外文名
print(re.findall("外文名 (.*)", msg))

# 出生日期
print(re.findall('出生日期 (\d{4})年(\d+)月(\d+)日', msg))

# 妻子姓名
print(re.findall('妻 子 (\S+)', msg))


"""
?!pattern
表示在没有配到pattern的字符串的前提下，
再进行后续的正则表达式匹配，后续匹配仍然从被匹配字符串的头开始

?=pattern
表示在配到pattern的字符串的前提下，
再进行后续的正则表达式匹配，后续匹配仍然从被匹配字符串的头开始

?:pattern
表示匹配的结果包含pattern的字符串
"""

# 括号中没有匹配到内容 才会继续匹配下去
# ['compar哈哈']
# 分析：
# 1、compar后面是一个断言匹配，匹配的内容是y或ist
# 2、因为是?! 所以  没有匹配成功的  才会继续断言后面的匹配
# 3、后面的哈哈再进行匹配
print(re.findall('compar(?!y|ist)哈哈', "compar哈哈, compary哈哈, comparist哈哈"))


# 括号中匹配到内容 才会继续匹配下去
# 和 ?！ 是相反的
# ['compary哈哈', 'comparist哈哈']
# 会消耗字符，下一个字符从括号后开始进行匹配
print(re.findall('compar(?:y|ist)哈哈', "compary哈哈, comparist哈哈"))


# 括号中匹配到内容 继续匹配下去
# 不会消耗字符，括号中的内容匹配之后，下一个字符的匹配会从预查之前的位置开始匹配
# 而且只预查不移动指针
# 正向预查 是一个非获取的匹配，该匹配不需要获取供以后使用
# 后面的匹配还是会回到预查之前的位置开始匹配
print(re.findall('compar(?=y|ist)y', "comparyy, comparist哈哈 comparby"))


# (?=100|N) 表示匹配字符是100或N  成功之后继续匹配
# egonN123 中egon后面的字符是N成立
# (?=N) 上一步成立继续这一步匹配 表示必须是字符N
# 不会吃字符 所以开始匹配位置为预查的开始位置 也就是还是egon后面的字符
# egonN123 中egon后面的字符为N成立
# 后面的匹配是N123 从预查的位置开始匹配成立
print(re.findall('egon(?=100|N)(?=100)100N123', 'egon100N123'))
