字符分析：
字符编码表就是字符和数字对应的一张表

// 一家独大
开始的时候使用的是ASCII表：（美国创建）
1、只支持英文字符
2、采用的8位二进制数对应英文字符 00000000

// 诸侯分立
GBK：（中国）
1、支持英文字符 中文
2、  采用8位二进制数对应英文
     采用16位二进制数对应中文
shift-jis: （韩国）
1、支持韩文和英文
2、采用的是16位二进制进行对应

// 分久必合
unicode： 内存统一使用unicoce
1、兼容万国字符
2、采用16位二进制数对应中文字符
个别生僻字会采用4Bytes/8Bytes



// 存
人类的字符 -- 1 内存 --> 转换为unicode格式的数字
--- 2 硬盘 ---> 再转换为ASCII或GBK等等其他类型的二进制数

// 取
硬盘中的二进制数通过对应的解码格式进行解码到内存中的unicode格式的数字
然后在内存中直接从unicode格式的数字转换为对应的人类字符

utf - unicode transfer formart
utf-8 是一个通用的二进制通用编码数字对应表

结论：
1、内存固定使用的unicode。
我们可以改变的是从内存存储到硬盘中的字符格式
一般使用的是UTF-8
我们也可以使用ASCII、GBK、shift-jis等等
存的时候使用的是什么编码格式  取的时候解码就使用什么格式


2、文本文件存取乱码问题。
--- 存乱了：在存储文件的时候 编码格式应该存储为支持文件字符的格式内容
比如含有中文：要存储为GBK或utf-8格式
比如含有韩文：要存储为shift-jis或utf-8格式
--- 取乱了：文件以什么格式存储的，我们就应该以什么格式进行解码读取到内存


3、python解释器的默认编码方式。
python3默认：utf-8
python2默认：ASCII

指定文件的编码格式：在文件的第一行写入 后面跟需要编码的格式
#coding: gbk
#coding: 文件当初存入到硬盘所采用的编码方式

python3中默认的字符串直接存储为unicode格式 无论如何取都不会乱码
python2中的字符串存储有两种格式：
1、str类型
x = "上"
2、unicode类型
x = u"上"  // 强制存储为unicode格式

